- Usado para criar um grande número de objetos relacionados sem invocar muito trabalho de sobrecarga ao fazer isso, otimizando o consumo de 
memória e melhorando o desempenho.
- Ele consegue isso compartilhando partes do estado do objeto entre vários objetos, assim, ele economiza memória armazenando em cache os mesmos
dados usados por objetos diferentes.

Cada objeto Flyweight possui duas partes:
	- O estado intríseco que é constante e é armazenado com o próprio objeto Flyweight na memória.
	- O estado extrínsico que não é constante e precisa ser calculado em tempo de execução e não é armazenado na memória.
- O padrão Flyweight permite que muitas intâncias de um objeto compartilhem seu estado intríseco e, assim, ele reduz o custo associado à criação
desses objetos.

Quando usar
- Quando muitos objetos semelhantes serão usados e o custo de armazenamento for alto.
- Quando pudermos compartilhar estado entre objetos e precisar criar muito desses objetos.
- Quando alguns objetos compartilhados facilmente substituiriam muitos objetos não compartilhados.
- Quando precisarmos economizar memória usada.

Vantagens
- Reduz o uso de memória compartilhando objetos pesados.
- Favores o Cache de dados permitindo um maior tempo de resposta.
- Aumenta o desempenho reduzinho o número de objetos pesados na memória.

Desvantagens
- Os objetos Flyweight pode intoduzir custos de tempo de execução associados à tranferência, localização e/ou computação do estado extrínseco,
especialmente se ele foi anteriormente armazenado como estado intríseco.
- A aplicação do padrão possui escopo reduzido e de acordo com o GOF deve ter 5 condições para que os benefícios do padrão sejam tangíveis.