	Não se deve misturar conceitos e/ou responsabilidades diferentes dentro do design ou do código de um projeto de software.
	A violão desde princípio causa código duplicado com mais de uma responsabilidade, violando também os principíos SOLID da 
Responsabilidade Única (SRP) e o princípio DRY.

Exemplos:
- Separar a interface do usuário(front-end) da lógica de negócios(back-end)
- Separar o código de acesso a dados do código da apresentação dos dados
- Separar o projeto em diferentes módulos/camadas com responsabilidade distintas
- Criar componentes/classes/funções que realizem apenas uma única tarefa com eficiência

A aplicação da Separação de Conceitos/Reponsabilidades envolve dois processos:
1) Reduzir o acoplamento: Acoplamento é o nível de dependência/conhecimento que pode existir entre os componentes do sistema.
Quando maior o acoplamento entre os componentes do sistema maior será dependência entre eles, e mais dificíl será manter,reusar
e estender o sistema.
2) Aumentar a coesão: Coesão é o nível de integridade interna dos componentes do sistema. Quanto maior a coesão entre os 
componentes mais definidas são suas responsabilidades, sendo mais dificíl desmenbrar o componente em outros componentes

Vantagens:
- Facilita a manutenção. A não duplicação do código e as responsabilidades bem definidas dos componentes do projeto tornam o
sistema mais fácil de manter.
- Melhor reutilização de código. O principal beneficío de reutilizar o código é a redução dos custos de manutenção. Sempre que
você precisa estender a funcionalidade ou corrigar um bug, é muito menos doloroso fazer isso quando você tem certeza de que ele
aparece em apenas um lugar.
- Melhora clareza do código. É muito mais fácil entender o que está acontecendo no programa quando cada módulo tem uma API
concisa e clara com um conjunto de métodos com escopo lógico e bem definido.
- Melhora a testabilidade. Módulos independentes com fucionalidades e escopo adequado e com isolamento do resto do aplicativo
são fáceis de testar. Você não precisa configurar o ambiente inteiro para ver como seu módulo funciona, basta substituir os 
módulos rais por simulações ou fonte de dados falsas.
- Permite a evolução mais rápida do projeto. Quer seja um novo recurso ou uma atualização de um recuso existendo, o isolamento
dos módulos ajuda a definir o escopo das áreas do projeto que podem ser afetadas pela mudança, acelerando assim o desenvolvimento
